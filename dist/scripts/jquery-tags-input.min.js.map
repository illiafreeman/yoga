{"version":3,"sources":["../node_modules/jquery.tagsinput-revisited/src/jquery.tagsinput-revisited.js"],"names":["$","delimiter","inputSettings","callbacks","fn","addTag","value","options","jQuery","extend","focus","callback","this","each","id","attr","tagslist","val","split","_getDelimiter","trim","unique","tagExist","_validateTag","addClass","append","text","href","click","removeTag","encodeURI","insertBefore","push","blur","tagsInput","updateTagsField","call","length","decodeURI","old","remove","str","i","importTags","inArray","settings","interactive","placeholder","minChars","maxChars","limit","validationPattern","width","height","autocomplete","hide","removeWithBackspace","uniqueIdCounter","data","markup","Date","getTime","pid","real_input","holder","input_wrapper","fake_input","onAddTag","onRemoveTag","onChange","insertAfter","css","on","event","removeClass","undefined","ui","item","_checkDelimiter","preventDefault","replace","tags","_splitIntoTags","lastTag","keyCode","closest","find","trigger","keydown","obj","join","result","test","indexOf","index","_delimiter","found","which","charCodeAt"],"mappings":"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","file":"jquery-tags-input.min.js","sourcesContent":["/* jQuery Tags Input Revisited Plugin\n *\n * Copyright (c) Krzysztof Rusnarczyk\n * Licensed under the MIT license */\n\n(function($) {\n\tvar delimiter = [];\n\tvar inputSettings = [];\n\tvar callbacks = [];\n\n\t$.fn.addTag = function(value, options) {\n\t\toptions = jQuery.extend({\n\t\t\tfocus: false,\n\t\t\tcallback: true\n\t\t}, options);\n\t\t\n\t\tthis.each(function() {\n\t\t\tvar id = $(this).attr('id');\n\n\t\t\tvar tagslist = $(this).val().split(_getDelimiter(delimiter[id]));\n\t\t\tif (tagslist[0] === '') tagslist = [];\n\n\t\t\tvalue = jQuery.trim(value);\n\t\t\t\n\t\t\tif ((inputSettings[id].unique && $(this).tagExist(value)) || !_validateTag(value, inputSettings[id], tagslist, delimiter[id])) {\n\t\t\t\t$('#' + id + '_tag').addClass('error');\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\t$('<span>').addClass('tag').append(\n\t\t\t\t$('<span>').text(value),\n\t\t\t\t$('<a>', {href: '#'}).click(function() {\n\t\t\t\t\treturn $('#' + id).removeTag(encodeURI(value));\n\t\t\t\t})\n\t\t\t).insertBefore('#' + id + '_addTag');\n\n\t\t\ttagslist.push(value);\n\n\t\t\t$('#' + id + '_tag').val('');\n\t\t\tif (options.focus) {\n\t\t\t\t$('#' + id + '_tag').focus();\n\t\t\t} else {\n\t\t\t\t$('#' + id + '_tag').blur();\n\t\t\t}\n\n\t\t\t$.fn.tagsInput.updateTagsField(this, tagslist);\n\n\t\t\tif (options.callback && callbacks[id] && callbacks[id]['onAddTag']) {\n\t\t\t\tvar f = callbacks[id]['onAddTag'];\n\t\t\t\tf.call(this, this, value);\n\t\t\t}\n\t\t\t\n\t\t\tif (callbacks[id] && callbacks[id]['onChange']) {\n\t\t\t\tvar i = tagslist.length;\n\t\t\t\tvar f = callbacks[id]['onChange'];\n\t\t\t\tf.call(this, this, value);\n\t\t\t}\n\t\t});\n\n\t\treturn false;\n\t};\n\n\t$.fn.removeTag = function(value) {\n\t\tvalue = decodeURI(value);\n\t\t\n\t\tthis.each(function() {\n\t\t\tvar id = $(this).attr('id');\n\n\t\t\tvar old = $(this).val().split(_getDelimiter(delimiter[id]));\n\n\t\t\t$('#' + id + '_tagsinput .tag').remove();\n\t\t\t\n\t\t\tvar str = '';\n\t\t\tfor (i = 0; i < old.length; ++i) {\n\t\t\t\tif (old[i] != value) {\n\t\t\t\t\tstr = str + _getDelimiter(delimiter[id]) + old[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$.fn.tagsInput.importTags(this, str);\n\n\t\t\tif (callbacks[id] && callbacks[id]['onRemoveTag']) {\n\t\t\t\tvar f = callbacks[id]['onRemoveTag'];\n\t\t\t\tf.call(this, this, value);\n\t\t\t}\n\t\t});\n\n\t\treturn false;\n\t};\n\n\t$.fn.tagExist = function(val) {\n\t\tvar id = $(this).attr('id');\n\t\tvar tagslist = $(this).val().split(_getDelimiter(delimiter[id]));\n\t\treturn (jQuery.inArray(val, tagslist) >= 0);\n\t};\n\n\t$.fn.importTags = function(str) {\n\t\tvar id = $(this).attr('id');\n\t\t$('#' + id + '_tagsinput .tag').remove();\n\t\t$.fn.tagsInput.importTags(this, str);\n\t};\n\n\t$.fn.tagsInput = function(options) {\n\t\tvar settings = jQuery.extend({\n\t\t\tinteractive: true,\n\t\t\tplaceholder: 'Add a tag',\n\t\t\tminChars: 0,\n\t\t\tmaxChars: null,\n\t\t\tlimit: null,\n\t\t\tvalidationPattern: null,\n\t\t\twidth: 'auto',\n\t\t\theight: 'auto',\n\t\t\tautocomplete: null,\n\t\t\thide: true,\n\t\t\tdelimiter: ',',\n\t\t\tunique: true,\n\t\t\tremoveWithBackspace: true\n\t\t}, options);\n\n\t\tvar uniqueIdCounter = 0;\n\n\t\tthis.each(function() {\n\t\t\tif (typeof $(this).data('tagsinput-init') !== 'undefined') return;\n\n\t\t\t$(this).data('tagsinput-init', true);\n\n\t\t\tif (settings.hide) $(this).hide();\n\t\t\t\n\t\t\tvar id = $(this).attr('id');\n\t\t\tif (!id || _getDelimiter(delimiter[$(this).attr('id')])) {\n\t\t\t\tid = $(this).attr('id', 'tags' + new Date().getTime() + (++uniqueIdCounter)).attr('id');\n\t\t\t}\n\n\t\t\tvar data = jQuery.extend({\n\t\t\t\tpid: id,\n\t\t\t\treal_input: '#' + id,\n\t\t\t\tholder: '#' + id + '_tagsinput',\n\t\t\t\tinput_wrapper: '#' + id + '_addTag',\n\t\t\t\tfake_input: '#' + id + '_tag'\n\t\t\t}, settings);\n\n\t\t\tdelimiter[id] = data.delimiter;\n\t\t\tinputSettings[id] = {\n\t\t\t\tminChars: settings.minChars,\n\t\t\t\tmaxChars: settings.maxChars,\n\t\t\t\tlimit: settings.limit,\n\t\t\t\tvalidationPattern: settings.validationPattern,\n\t\t\t\tunique: settings.unique\n\t\t\t};\n\n\t\t\tif (settings.onAddTag || settings.onRemoveTag || settings.onChange) {\n\t\t\t\tcallbacks[id] = [];\n\t\t\t\tcallbacks[id]['onAddTag'] = settings.onAddTag;\n\t\t\t\tcallbacks[id]['onRemoveTag'] = settings.onRemoveTag;\n\t\t\t\tcallbacks[id]['onChange'] = settings.onChange;\n\t\t\t}\n\n\t\t\tvar markup = '<div id=\"' + id + '_tagsinput\" class=\"tagsinput\"><div id=\"' + id + '_addTag\">';\n\n\t\t\tif (settings.interactive) {\n\t\t\t\tmarkup = markup + '<input id=\"' + id + '_tag\" value=\"\" placeholder=\"' + settings.placeholder + '\">';\n\t\t\t}\n\n\t\t\t$(markup).insertAfter(this);\n\n\t\t\t$(data.holder).css('width', settings.width);\n\t\t\t$(data.holder).css('min-height', settings.height);\n\t\t\t$(data.holder).css('height', settings.height);\n\n\t\t\tif ($(data.real_input).val() !== '') {\n\t\t\t\t$.fn.tagsInput.importTags($(data.real_input), $(data.real_input).val());\n\t\t\t}\n\t\t\t\n\t\t\t// Stop here if interactive option is not chosen\n\t\t\tif (!settings.interactive) return;\n\t\t\t\n\t\t\t$(data.fake_input).val('');\n\t\t\t$(data.fake_input).data('pasted', false);\n\t\t\t\n\t\t\t$(data.fake_input).on('focus', data, function(event) {\n\t\t\t\t$(data.holder).addClass('focus');\n\t\t\t\t\n\t\t\t\tif ($(this).val() === '') {\n\t\t\t\t\t$(this).removeClass('error');\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\t$(data.fake_input).on('blur', data, function(event) {\n\t\t\t\t$(data.holder).removeClass('focus');\n\t\t\t});\n\n\t\t\tif (settings.autocomplete !== null && jQuery.ui.autocomplete !== undefined) {\n\t\t\t\t$(data.fake_input).autocomplete(settings.autocomplete);\n\t\t\t\t$(data.fake_input).on('autocompleteselect', data, function(event, ui) {\n\t\t\t\t\t$(event.data.real_input).addTag(ui.item.value, {\n\t\t\t\t\t\tfocus: true,\n\t\t\t\t\t\tunique: settings.unique\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\treturn false;\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\t$(data.fake_input).on('keypress', data, function(event) {\n\t\t\t\t\tif (_checkDelimiter(event)) {\n\t\t\t\t\t\t$(this).autocomplete(\"close\");\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t$(data.fake_input).on('blur', data, function(event) {\n\t\t\t\t\t$(event.data.real_input).addTag($(event.data.fake_input).val(), {\n\t\t\t\t\t\tfocus: true,\n\t\t\t\t\t\tunique: settings.unique\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\treturn false;\n\t\t\t\t});\n\t\t\t}\n\t\t\t\n\t\t\t// If a user types a delimiter create a new tag\n\t\t\t$(data.fake_input).on('keypress', data, function(event) {\n\t\t\t\tif (_checkDelimiter(event)) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\n\t\t\t\t\t$(event.data.real_input).addTag($(event.data.fake_input).val(), {\n\t\t\t\t\t\tfocus: true,\n\t\t\t\t\t\tunique: settings.unique\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\t$(data.fake_input).on('paste', function () {\n\t\t\t\t$(this).data('pasted', true);\n\t\t\t});\n\t\t\t\n\t\t\t// If a user pastes the text check if it shouldn't be splitted into tags\n\t\t\t$(data.fake_input).on('input', data, function(event) {\n\t\t\t\tif (!$(this).data('pasted')) return;\n\t\t\t\t\n\t\t\t\t$(this).data('pasted', false);\n\t\t\t\t\n\t\t\t\tvar value = $(event.data.fake_input).val();\n\t\t\t\t\n\t\t\t\tvalue = value.replace(/\\n/g, '');\n\t\t\t\tvalue = value.replace(/\\s/g, '');\n\t\t\t\t\n\t\t\t\tvar tags = _splitIntoTags(event.data.delimiter, value);\n\t\t\t\t\n\t\t\t\tif (tags.length > 1) {\n\t\t\t\t\tfor (var i = 0; i < tags.length; ++i) {\n\t\t\t\t\t\t$(event.data.real_input).addTag(tags[i], {\n\t\t\t\t\t\t\tfocus: true,\n\t\t\t\t\t\t\tunique: settings.unique\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\t// Deletes last tag on backspace\n\t\t\tdata.removeWithBackspace && $(data.fake_input).on('keydown', function(event) {\n\t\t\t\tif (event.keyCode == 8 && $(this).val() === '') {\n\t\t\t\t\t event.preventDefault();\n\t\t\t\t\t var lastTag = $(this).closest('.tagsinput').find('.tag:last > span').text();\n\t\t\t\t\t var id = $(this).attr('id').replace(/_tag$/, '');\n\t\t\t\t\t $('#' + id).removeTag(encodeURI(lastTag));\n\t\t\t\t\t $(this).trigger('focus');\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Removes the error class when user changes the value of the fake input\n\t\t\t$(data.fake_input).keydown(function(event) {\n\t\t\t\t// enter, alt, shift, esc, ctrl and arrows keys are ignored\n\t\t\t\tif (jQuery.inArray(event.keyCode, [13, 37, 38, 39, 40, 27, 16, 17, 18, 225]) === -1) {\n\t\t\t\t\t$(this).removeClass('error');\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\treturn this;\n\t};\n\t\n\t$.fn.tagsInput.updateTagsField = function(obj, tagslist) {\n\t\tvar id = $(obj).attr('id');\n\t\t$(obj).val(tagslist.join(_getDelimiter(delimiter[id])));\n\t};\n\n\t$.fn.tagsInput.importTags = function(obj, val) {\n\t\t$(obj).val('');\n\t\t\n\t\tvar id = $(obj).attr('id');\n\t\tvar tags = _splitIntoTags(delimiter[id], val); \n\t\t\n\t\tfor (i = 0; i < tags.length; ++i) {\n\t\t\t$(obj).addTag(tags[i], {\n\t\t\t\tfocus: false,\n\t\t\t\tcallback: false\n\t\t\t});\n\t\t}\n\t\t\n\t\tif (callbacks[id] && callbacks[id]['onChange']) {\n\t\t\tvar f = callbacks[id]['onChange'];\n\t\t\tf.call(obj, obj, tags);\n\t\t}\n\t};\n\t\n\tvar _getDelimiter = function(delimiter) {\n\t\tif (typeof delimiter === 'undefined') {\n\t\t\treturn delimiter;\n\t\t} else if (typeof delimiter === 'string') {\n\t\t\treturn delimiter;\n\t\t} else {\n\t\t\treturn delimiter[0];\n\t\t}\n\t};\n\t\n\tvar _validateTag = function(value, inputSettings, tagslist, delimiter) {\n\t\tvar result = true;\n\t\t\n\t\tif (value === '') result = false;\n\t\tif (value.length < inputSettings.minChars) result = false;\n\t\tif (inputSettings.maxChars !== null && value.length > inputSettings.maxChars) result = false;\n\t\tif (inputSettings.limit !== null && tagslist.length >= inputSettings.limit) result = false;\n\t\tif (inputSettings.validationPattern !== null && !inputSettings.validationPattern.test(value)) result = false;\n\t\t\n\t\tif (typeof delimiter === 'string') {\n\t\t\tif (value.indexOf(delimiter) > -1) result = false;\n\t\t} else {\n\t\t\t$.each(delimiter, function(index, _delimiter) {\n\t\t\t\tif (value.indexOf(_delimiter) > -1) result = false;\n\t\t\t\treturn false;\n\t\t\t});\n\t\t}\n\t\t\n\t\treturn result;\n\t};\n \n\tvar _checkDelimiter = function(event) {\n\t\tvar found = false;\n\t\t\n\t\tif (event.which === 13) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (typeof event.data.delimiter === 'string') {\n\t\t\tif (event.which === event.data.delimiter.charCodeAt(0)) {\n\t\t\t\tfound = true;\n\t\t\t}\n\t\t} else {\n\t\t\t$.each(event.data.delimiter, function(index, delimiter) {\n\t\t\t\tif (event.which === delimiter.charCodeAt(0)) {\n\t\t\t\t\tfound = true;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\t\n\t\treturn found;\n\t };\n\t \n\t var _splitIntoTags = function(delimiter, value) {\n\t\t if (value === '') return [];\n\t\t \n\t\t if (typeof delimiter === 'string') {\n\t\t\t return value.split(delimiter);\n\t\t } else {\n\t\t\t var tmpDelimiter = '∞';\n\t\t\t var text = value;\n\t\t\t \n\t\t\t $.each(delimiter, function(index, _delimiter) {\n\t\t\t\t text = text.split(_delimiter).join(tmpDelimiter);\n\t\t\t });\n\t\t\t \n\t\t\t return text.split(tmpDelimiter);\n\t\t }\n\t\t \n\t\t return [];\n\t };\n})(jQuery);\n"],"sourceRoot":"assets/scripts/"}