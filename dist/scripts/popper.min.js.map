{"version":3,"sources":["../node_modules/popper.js/dist/umd/popper.js"],"names":["global","factory","exports","module","define","amd","Popper","this","isBrowser","window","document","navigator","timeoutDuration","longerTimeoutBrowsers","i","length","userAgent","indexOf","debounce","Promise","fn","called","resolve","then","scheduled","setTimeout","isFunction","functionToCheck","toString","call","getStyleComputedProperty","element","property","nodeType","css","ownerDocument","defaultView","getComputedStyle","getParentNode","nodeName","parentNode","host","getScrollParent","body","_getStyleComputedProp","overflow","overflowX","overflowY","test","getReferenceNode","reference","referenceNode","isIE11","MSInputMethodContext","documentMode","isIE10","isIE","version","getOffsetParent","documentElement","noOffsetParent","offsetParent","nextElementSibling","getRoot","node","findCommonOffsetParent","element1","element2","order","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","start","end","range","createRange","setStart","setEnd","commonAncestorContainer","contains","firstElementChild","element1root","getScroll","upperSide","arguments","undefined","html","scrollingElement","getBordersSize","styles","axis","sideA","sideB","parseFloat","getSize","computedStyle","Math","max","parseInt","getWindowSizes","height","width","classCallCheck","instance","Constructor","TypeError","createClass","protoProps","staticProps","defineProperties","prototype","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","key","obj","value","_extends","assign","source","hasOwnProperty","getClientRect","offsets","right","left","bottom","top","getBoundingClientRect","scrollTop","scrollLeft","rect","e","result","sizes","clientWidth","clientHeight","horizScrollbar","offsetWidth","vertScrollbar","offsetHeight","getOffsetRectRelativeToArbitraryNode","children","parent","fixedPosition","isHTML","childrenRect","parentRect","scrollParent","borderTopWidth","borderLeftWidth","marginTop","marginLeft","subtract","modifier","includeScroll","getFixedPositionOffsetParent","parentElement","el","getBoundaries","popper","padding","boundariesElement","boundaries","excludeScroll","relativeOffset","innerWidth","innerHeight","getViewportOffsetRectRelativeToArtbitraryNode","boundariesNode","isFixed","_getWindowSizes","isPaddingNumber","computeAutoPlacement","placement","refRect","rects","sortedAreas","keys","map","area","_ref","sort","a","b","filteredAreas","filter","_ref2","computedPlacement","variation","split","getReferenceOffsets","state","getOuterSizes","x","marginBottom","y","marginRight","getOppositePlacement","hash","replace","matched","getPopperOffsets","referenceOffsets","popperRect","popperOffsets","isHoriz","mainSide","secondarySide","measurement","secondaryMeasurement","find","arr","check","Array","runModifiers","modifiers","data","ends","slice","prop","findIndex","cur","match","forEach","console","warn","enabled","isModifierEnabled","modifierName","some","name","getSupportedPropertyName","prefixes","upperProp","charAt","toUpperCase","prefix","toCheck","style","getWindow","setupEventListeners","options","updateBound","addEventListener","passive","scrollElement","attachToScrollParents","event","callback","scrollParents","isBody","push","eventsEnabled","disableEventListeners","cancelAnimationFrame","scheduleUpdate","removeEventListener","isNumeric","n","isNaN","isFinite","setStyles","unit","isFirefox","isModifierRequired","requestingName","requestedName","_requesting","requesting","isRequired","requested","placements","validPlacements","clockwise","counter","index","concat","reverse","BEHAVIORS","parseOffset","offset","basePlacement","useHeight","fragments","frag","trim","divider","search","splitRegex","op","mergeWithPrevious","reduce","str","toValue","index2","Defaults","positionFixed","removeOnDestroy","onCreate","onUpdate","shift","side","shiftvariation","_data$offsets","isVertical","shiftOffsets","preventOverflow","transformProp","popperStyles","transform","priority","primary","escapeWithReference","secondary","min","keepTogether","floor","opSide","arrow","arrowElement","querySelector","len","sideCapitalized","toLowerCase","altSide","arrowElementSize","center","popperMarginSide","popperBorderSide","sideValue","_data$offsets$arrow","round","flip","flipped","originalPlacement","placementOpposite","flipOrder","behavior","step","refOffsets","overlapsRef","overflowsLeft","overflowsRight","overflowsTop","overflowsBottom","overflowsBoundaries","flippedVariationByRef","flipVariations","flippedVariationByContent","flipVariationsByContent","flippedVariation","inner","subtractLength","hide","bound","attributes","computeStyle","legacyGpuAccelerationOption","gpuAcceleration","popperWidth","offsetParentRect","position","shouldRound","devicePixelRatio","noRound","v","referenceWidth","isVariation","horizontalToInteger","verticalToInteger","prefixedProperty","willChange","invertTop","invertLeft","x-placement","arrowStyles","applyStyle","setAttribute","removeAttribute","onLoad","modifierOptions","isDestroyed","isCreated","removeChild","_this","requestAnimationFrame","update","bind","jquery","enableEventListeners","Utils","PopperUtils"],"mappings":"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","file":"popper.min.js","sourcesContent":["/**!\n * @fileOverview Kickass library to create and place poppers near their reference elements.\n * @version 1.16.1\n * @license\n * Copyright (c) 2016 Federico Zivolo and contributors\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.Popper = factory());\n}(this, (function () { 'use strict';\n\nvar isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && typeof navigator !== 'undefined';\n\nvar timeoutDuration = function () {\n  var longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];\n  for (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {\n    if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {\n      return 1;\n    }\n  }\n  return 0;\n}();\n\nfunction microtaskDebounce(fn) {\n  var called = false;\n  return function () {\n    if (called) {\n      return;\n    }\n    called = true;\n    window.Promise.resolve().then(function () {\n      called = false;\n      fn();\n    });\n  };\n}\n\nfunction taskDebounce(fn) {\n  var scheduled = false;\n  return function () {\n    if (!scheduled) {\n      scheduled = true;\n      setTimeout(function () {\n        scheduled = false;\n        fn();\n      }, timeoutDuration);\n    }\n  };\n}\n\nvar supportsMicroTasks = isBrowser && window.Promise;\n\n/**\n* Create a debounced version of a method, that's asynchronously deferred\n* but called in the minimum time possible.\n*\n* @method\n* @memberof Popper.Utils\n* @argument {Function} fn\n* @returns {Function}\n*/\nvar debounce = supportsMicroTasks ? microtaskDebounce : taskDebounce;\n\n/**\n * Check if the given variable is a function\n * @method\n * @memberof Popper.Utils\n * @argument {Any} functionToCheck - variable to check\n * @returns {Boolean} answer to: is a function?\n */\nfunction isFunction(functionToCheck) {\n  var getType = {};\n  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';\n}\n\n/**\n * Get CSS computed property of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Eement} element\n * @argument {String} property\n */\nfunction getStyleComputedProperty(element, property) {\n  if (element.nodeType !== 1) {\n    return [];\n  }\n  // NOTE: 1 DOM access here\n  var window = element.ownerDocument.defaultView;\n  var css = window.getComputedStyle(element, null);\n  return property ? css[property] : css;\n}\n\n/**\n * Returns the parentNode or the host of the element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} parent\n */\nfunction getParentNode(element) {\n  if (element.nodeName === 'HTML') {\n    return element;\n  }\n  return element.parentNode || element.host;\n}\n\n/**\n * Returns the scrolling parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} scroll parent\n */\nfunction getScrollParent(element) {\n  // Return body, `getScroll` will take care to get the correct `scrollTop` from it\n  if (!element) {\n    return document.body;\n  }\n\n  switch (element.nodeName) {\n    case 'HTML':\n    case 'BODY':\n      return element.ownerDocument.body;\n    case '#document':\n      return element.body;\n  }\n\n  // Firefox want us to check `-x` and `-y` variations as well\n\n  var _getStyleComputedProp = getStyleComputedProperty(element),\n      overflow = _getStyleComputedProp.overflow,\n      overflowX = _getStyleComputedProp.overflowX,\n      overflowY = _getStyleComputedProp.overflowY;\n\n  if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {\n    return element;\n  }\n\n  return getScrollParent(getParentNode(element));\n}\n\n/**\n * Returns the reference node of the reference object, or the reference object itself.\n * @method\n * @memberof Popper.Utils\n * @param {Element|Object} reference - the reference element (the popper will be relative to this)\n * @returns {Element} parent\n */\nfunction getReferenceNode(reference) {\n  return reference && reference.referenceNode ? reference.referenceNode : reference;\n}\n\nvar isIE11 = isBrowser && !!(window.MSInputMethodContext && document.documentMode);\nvar isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);\n\n/**\n * Determines if the browser is Internet Explorer\n * @method\n * @memberof Popper.Utils\n * @param {Number} version to check\n * @returns {Boolean} isIE\n */\nfunction isIE(version) {\n  if (version === 11) {\n    return isIE11;\n  }\n  if (version === 10) {\n    return isIE10;\n  }\n  return isIE11 || isIE10;\n}\n\n/**\n * Returns the offset parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} offset parent\n */\nfunction getOffsetParent(element) {\n  if (!element) {\n    return document.documentElement;\n  }\n\n  var noOffsetParent = isIE(10) ? document.body : null;\n\n  // NOTE: 1 DOM access here\n  var offsetParent = element.offsetParent || null;\n  // Skip hidden elements which don't have an offsetParent\n  while (offsetParent === noOffsetParent && element.nextElementSibling) {\n    offsetParent = (element = element.nextElementSibling).offsetParent;\n  }\n\n  var nodeName = offsetParent && offsetParent.nodeName;\n\n  if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {\n    return element ? element.ownerDocument.documentElement : document.documentElement;\n  }\n\n  // .offsetParent will return the closest TH, TD or TABLE in case\n  // no offsetParent is present, I hate this job...\n  if (['TH', 'TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {\n    return getOffsetParent(offsetParent);\n  }\n\n  return offsetParent;\n}\n\nfunction isOffsetContainer(element) {\n  var nodeName = element.nodeName;\n\n  if (nodeName === 'BODY') {\n    return false;\n  }\n  return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element;\n}\n\n/**\n * Finds the root node (document, shadowDOM root) of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} node\n * @returns {Element} root node\n */\nfunction getRoot(node) {\n  if (node.parentNode !== null) {\n    return getRoot(node.parentNode);\n  }\n\n  return node;\n}\n\n/**\n * Finds the offset parent common to the two provided nodes\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element1\n * @argument {Element} element2\n * @returns {Element} common offset parent\n */\nfunction findCommonOffsetParent(element1, element2) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {\n    return document.documentElement;\n  }\n\n  // Here we make sure to give as \"start\" the element that comes first in the DOM\n  var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;\n  var start = order ? element1 : element2;\n  var end = order ? element2 : element1;\n\n  // Get common ancestor container\n  var range = document.createRange();\n  range.setStart(start, 0);\n  range.setEnd(end, 0);\n  var commonAncestorContainer = range.commonAncestorContainer;\n\n  // Both nodes are inside #document\n\n  if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {\n    if (isOffsetContainer(commonAncestorContainer)) {\n      return commonAncestorContainer;\n    }\n\n    return getOffsetParent(commonAncestorContainer);\n  }\n\n  // one of the nodes is inside shadowDOM, find which one\n  var element1root = getRoot(element1);\n  if (element1root.host) {\n    return findCommonOffsetParent(element1root.host, element2);\n  } else {\n    return findCommonOffsetParent(element1, getRoot(element2).host);\n  }\n}\n\n/**\n * Gets the scroll value of the given element in the given side (top and left)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {String} side `top` or `left`\n * @returns {number} amount of scrolled pixels\n */\nfunction getScroll(element) {\n  var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';\n\n  var upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';\n  var nodeName = element.nodeName;\n\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    var html = element.ownerDocument.documentElement;\n    var scrollingElement = element.ownerDocument.scrollingElement || html;\n    return scrollingElement[upperSide];\n  }\n\n  return element[upperSide];\n}\n\n/*\n * Sum or subtract the element scroll values (left and top) from a given rect object\n * @method\n * @memberof Popper.Utils\n * @param {Object} rect - Rect object you want to change\n * @param {HTMLElement} element - The element from the function reads the scroll values\n * @param {Boolean} subtract - set to true if you want to subtract the scroll values\n * @return {Object} rect - The modifier rect object\n */\nfunction includeScroll(rect, element) {\n  var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  var scrollTop = getScroll(element, 'top');\n  var scrollLeft = getScroll(element, 'left');\n  var modifier = subtract ? -1 : 1;\n  rect.top += scrollTop * modifier;\n  rect.bottom += scrollTop * modifier;\n  rect.left += scrollLeft * modifier;\n  rect.right += scrollLeft * modifier;\n  return rect;\n}\n\n/*\n * Helper to detect borders of a given element\n * @method\n * @memberof Popper.Utils\n * @param {CSSStyleDeclaration} styles\n * Result of `getStyleComputedProperty` on the given element\n * @param {String} axis - `x` or `y`\n * @return {number} borders - The borders size of the given axis\n */\n\nfunction getBordersSize(styles, axis) {\n  var sideA = axis === 'x' ? 'Left' : 'Top';\n  var sideB = sideA === 'Left' ? 'Right' : 'Bottom';\n\n  return parseFloat(styles['border' + sideA + 'Width']) + parseFloat(styles['border' + sideB + 'Width']);\n}\n\nfunction getSize(axis, body, html, computedStyle) {\n  return Math.max(body['offset' + axis], body['scroll' + axis], html['client' + axis], html['offset' + axis], html['scroll' + axis], isIE(10) ? parseInt(html['offset' + axis]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Top' : 'Left')]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Bottom' : 'Right')]) : 0);\n}\n\nfunction getWindowSizes(document) {\n  var body = document.body;\n  var html = document.documentElement;\n  var computedStyle = isIE(10) && getComputedStyle(html);\n\n  return {\n    height: getSize('Height', body, html, computedStyle),\n    width: getSize('Width', body, html, computedStyle)\n  };\n}\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\n\n\n\n\nvar defineProperty = function (obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\n/**\n * Given element offsets, generate an output similar to getBoundingClientRect\n * @method\n * @memberof Popper.Utils\n * @argument {Object} offsets\n * @returns {Object} ClientRect like output\n */\nfunction getClientRect(offsets) {\n  return _extends({}, offsets, {\n    right: offsets.left + offsets.width,\n    bottom: offsets.top + offsets.height\n  });\n}\n\n/**\n * Get bounding client rect of given element\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} element\n * @return {Object} client rect\n */\nfunction getBoundingClientRect(element) {\n  var rect = {};\n\n  // IE10 10 FIX: Please, don't ask, the element isn't\n  // considered in DOM in some circumstances...\n  // This isn't reproducible in IE10 compatibility mode of IE11\n  try {\n    if (isIE(10)) {\n      rect = element.getBoundingClientRect();\n      var scrollTop = getScroll(element, 'top');\n      var scrollLeft = getScroll(element, 'left');\n      rect.top += scrollTop;\n      rect.left += scrollLeft;\n      rect.bottom += scrollTop;\n      rect.right += scrollLeft;\n    } else {\n      rect = element.getBoundingClientRect();\n    }\n  } catch (e) {}\n\n  var result = {\n    left: rect.left,\n    top: rect.top,\n    width: rect.right - rect.left,\n    height: rect.bottom - rect.top\n  };\n\n  // subtract scrollbar size from sizes\n  var sizes = element.nodeName === 'HTML' ? getWindowSizes(element.ownerDocument) : {};\n  var width = sizes.width || element.clientWidth || result.width;\n  var height = sizes.height || element.clientHeight || result.height;\n\n  var horizScrollbar = element.offsetWidth - width;\n  var vertScrollbar = element.offsetHeight - height;\n\n  // if an hypothetical scrollbar is detected, we must be sure it's not a `border`\n  // we make this check conditional for performance reasons\n  if (horizScrollbar || vertScrollbar) {\n    var styles = getStyleComputedProperty(element);\n    horizScrollbar -= getBordersSize(styles, 'x');\n    vertScrollbar -= getBordersSize(styles, 'y');\n\n    result.width -= horizScrollbar;\n    result.height -= vertScrollbar;\n  }\n\n  return getClientRect(result);\n}\n\nfunction getOffsetRectRelativeToArbitraryNode(children, parent) {\n  var fixedPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  var isIE10 = isIE(10);\n  var isHTML = parent.nodeName === 'HTML';\n  var childrenRect = getBoundingClientRect(children);\n  var parentRect = getBoundingClientRect(parent);\n  var scrollParent = getScrollParent(children);\n\n  var styles = getStyleComputedProperty(parent);\n  var borderTopWidth = parseFloat(styles.borderTopWidth);\n  var borderLeftWidth = parseFloat(styles.borderLeftWidth);\n\n  // In cases where the parent is fixed, we must ignore negative scroll in offset calc\n  if (fixedPosition && isHTML) {\n    parentRect.top = Math.max(parentRect.top, 0);\n    parentRect.left = Math.max(parentRect.left, 0);\n  }\n  var offsets = getClientRect({\n    top: childrenRect.top - parentRect.top - borderTopWidth,\n    left: childrenRect.left - parentRect.left - borderLeftWidth,\n    width: childrenRect.width,\n    height: childrenRect.height\n  });\n  offsets.marginTop = 0;\n  offsets.marginLeft = 0;\n\n  // Subtract margins of documentElement in case it's being used as parent\n  // we do this only on HTML because it's the only element that behaves\n  // differently when margins are applied to it. The margins are included in\n  // the box of the documentElement, in the other cases not.\n  if (!isIE10 && isHTML) {\n    var marginTop = parseFloat(styles.marginTop);\n    var marginLeft = parseFloat(styles.marginLeft);\n\n    offsets.top -= borderTopWidth - marginTop;\n    offsets.bottom -= borderTopWidth - marginTop;\n    offsets.left -= borderLeftWidth - marginLeft;\n    offsets.right -= borderLeftWidth - marginLeft;\n\n    // Attach marginTop and marginLeft because in some circumstances we may need them\n    offsets.marginTop = marginTop;\n    offsets.marginLeft = marginLeft;\n  }\n\n  if (isIE10 && !fixedPosition ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {\n    offsets = includeScroll(offsets, parent);\n  }\n\n  return offsets;\n}\n\nfunction getViewportOffsetRectRelativeToArtbitraryNode(element) {\n  var excludeScroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var html = element.ownerDocument.documentElement;\n  var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);\n  var width = Math.max(html.clientWidth, window.innerWidth || 0);\n  var height = Math.max(html.clientHeight, window.innerHeight || 0);\n\n  var scrollTop = !excludeScroll ? getScroll(html) : 0;\n  var scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0;\n\n  var offset = {\n    top: scrollTop - relativeOffset.top + relativeOffset.marginTop,\n    left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,\n    width: width,\n    height: height\n  };\n\n  return getClientRect(offset);\n}\n\n/**\n * Check if the given element is fixed or is inside a fixed parent\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {Element} customContainer\n * @returns {Boolean} answer to \"isFixed?\"\n */\nfunction isFixed(element) {\n  var nodeName = element.nodeName;\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    return false;\n  }\n  if (getStyleComputedProperty(element, 'position') === 'fixed') {\n    return true;\n  }\n  var parentNode = getParentNode(element);\n  if (!parentNode) {\n    return false;\n  }\n  return isFixed(parentNode);\n}\n\n/**\n * Finds the first parent of an element that has a transformed property defined\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} first transformed parent or documentElement\n */\n\nfunction getFixedPositionOffsetParent(element) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n  if (!element || !element.parentElement || isIE()) {\n    return document.documentElement;\n  }\n  var el = element.parentElement;\n  while (el && getStyleComputedProperty(el, 'transform') === 'none') {\n    el = el.parentElement;\n  }\n  return el || document.documentElement;\n}\n\n/**\n * Computed the boundaries limits and return them\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} popper\n * @param {HTMLElement} reference\n * @param {number} padding\n * @param {HTMLElement} boundariesElement - Element used to define the boundaries\n * @param {Boolean} fixedPosition - Is in fixed position mode\n * @returns {Object} Coordinates of the boundaries\n */\nfunction getBoundaries(popper, reference, padding, boundariesElement) {\n  var fixedPosition = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n  // NOTE: 1 DOM access here\n\n  var boundaries = { top: 0, left: 0 };\n  var offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));\n\n  // Handle viewport case\n  if (boundariesElement === 'viewport') {\n    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);\n  } else {\n    // Handle other cases based on DOM element used as boundaries\n    var boundariesNode = void 0;\n    if (boundariesElement === 'scrollParent') {\n      boundariesNode = getScrollParent(getParentNode(reference));\n      if (boundariesNode.nodeName === 'BODY') {\n        boundariesNode = popper.ownerDocument.documentElement;\n      }\n    } else if (boundariesElement === 'window') {\n      boundariesNode = popper.ownerDocument.documentElement;\n    } else {\n      boundariesNode = boundariesElement;\n    }\n\n    var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent, fixedPosition);\n\n    // In case of HTML, we need a different computation\n    if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {\n      var _getWindowSizes = getWindowSizes(popper.ownerDocument),\n          height = _getWindowSizes.height,\n          width = _getWindowSizes.width;\n\n      boundaries.top += offsets.top - offsets.marginTop;\n      boundaries.bottom = height + offsets.top;\n      boundaries.left += offsets.left - offsets.marginLeft;\n      boundaries.right = width + offsets.left;\n    } else {\n      // for all the other DOM elements, this one is good\n      boundaries = offsets;\n    }\n  }\n\n  // Add paddings\n  padding = padding || 0;\n  var isPaddingNumber = typeof padding === 'number';\n  boundaries.left += isPaddingNumber ? padding : padding.left || 0;\n  boundaries.top += isPaddingNumber ? padding : padding.top || 0;\n  boundaries.right -= isPaddingNumber ? padding : padding.right || 0;\n  boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0;\n\n  return boundaries;\n}\n\nfunction getArea(_ref) {\n  var width = _ref.width,\n      height = _ref.height;\n\n  return width * height;\n}\n\n/**\n * Utility used to transform the `auto` placement to the placement with more\n * available space.\n * @method\n * @memberof Popper.Utils\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {\n  var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n\n  if (placement.indexOf('auto') === -1) {\n    return placement;\n  }\n\n  var boundaries = getBoundaries(popper, reference, padding, boundariesElement);\n\n  var rects = {\n    top: {\n      width: boundaries.width,\n      height: refRect.top - boundaries.top\n    },\n    right: {\n      width: boundaries.right - refRect.right,\n      height: boundaries.height\n    },\n    bottom: {\n      width: boundaries.width,\n      height: boundaries.bottom - refRect.bottom\n    },\n    left: {\n      width: refRect.left - boundaries.left,\n      height: boundaries.height\n    }\n  };\n\n  var sortedAreas = Object.keys(rects).map(function (key) {\n    return _extends({\n      key: key\n    }, rects[key], {\n      area: getArea(rects[key])\n    });\n  }).sort(function (a, b) {\n    return b.area - a.area;\n  });\n\n  var filteredAreas = sortedAreas.filter(function (_ref2) {\n    var width = _ref2.width,\n        height = _ref2.height;\n    return width >= popper.clientWidth && height >= popper.clientHeight;\n  });\n\n  var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;\n\n  var variation = placement.split('-')[1];\n\n  return computedPlacement + (variation ? '-' + variation : '');\n}\n\n/**\n * Get offsets to the reference element\n * @method\n * @memberof Popper.Utils\n * @param {Object} state\n * @param {Element} popper - the popper element\n * @param {Element} reference - the reference element (the popper will be relative to this)\n * @param {Element} fixedPosition - is in fixed position mode\n * @returns {Object} An object containing the offsets which will be applied to the popper\n */\nfunction getReferenceOffsets(state, popper, reference) {\n  var fixedPosition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n  var commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));\n  return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);\n}\n\n/**\n * Get the outer sizes of the given element (offset size + margins)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Object} object containing width and height properties\n */\nfunction getOuterSizes(element) {\n  var window = element.ownerDocument.defaultView;\n  var styles = window.getComputedStyle(element);\n  var x = parseFloat(styles.marginTop || 0) + parseFloat(styles.marginBottom || 0);\n  var y = parseFloat(styles.marginLeft || 0) + parseFloat(styles.marginRight || 0);\n  var result = {\n    width: element.offsetWidth + y,\n    height: element.offsetHeight + x\n  };\n  return result;\n}\n\n/**\n * Get the opposite placement of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement\n * @returns {String} flipped placement\n */\nfunction getOppositePlacement(placement) {\n  var hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };\n  return placement.replace(/left|right|bottom|top/g, function (matched) {\n    return hash[matched];\n  });\n}\n\n/**\n * Get offsets to the popper\n * @method\n * @memberof Popper.Utils\n * @param {Object} position - CSS position the Popper will get applied\n * @param {HTMLElement} popper - the popper element\n * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)\n * @param {String} placement - one of the valid placement options\n * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper\n */\nfunction getPopperOffsets(popper, referenceOffsets, placement) {\n  placement = placement.split('-')[0];\n\n  // Get popper node sizes\n  var popperRect = getOuterSizes(popper);\n\n  // Add position, width and height to our offsets object\n  var popperOffsets = {\n    width: popperRect.width,\n    height: popperRect.height\n  };\n\n  // depending by the popper placement we have to compute its offsets slightly differently\n  var isHoriz = ['right', 'left'].indexOf(placement) !== -1;\n  var mainSide = isHoriz ? 'top' : 'left';\n  var secondarySide = isHoriz ? 'left' : 'top';\n  var measurement = isHoriz ? 'height' : 'width';\n  var secondaryMeasurement = !isHoriz ? 'height' : 'width';\n\n  popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;\n  if (placement === secondarySide) {\n    popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];\n  } else {\n    popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];\n  }\n\n  return popperOffsets;\n}\n\n/**\n * Mimics the `find` method of Array\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nfunction find(arr, check) {\n  // use native find if supported\n  if (Array.prototype.find) {\n    return arr.find(check);\n  }\n\n  // use `filter` to obtain the same behavior of `find`\n  return arr.filter(check)[0];\n}\n\n/**\n * Return the index of the matching object\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nfunction findIndex(arr, prop, value) {\n  // use native findIndex if supported\n  if (Array.prototype.findIndex) {\n    return arr.findIndex(function (cur) {\n      return cur[prop] === value;\n    });\n  }\n\n  // use `find` + `indexOf` if `findIndex` isn't supported\n  var match = find(arr, function (obj) {\n    return obj[prop] === value;\n  });\n  return arr.indexOf(match);\n}\n\n/**\n * Loop trough the list of modifiers and run them in order,\n * each of them will then edit the data object.\n * @method\n * @memberof Popper.Utils\n * @param {dataObject} data\n * @param {Array} modifiers\n * @param {String} ends - Optional modifier name used as stopper\n * @returns {dataObject}\n */\nfunction runModifiers(modifiers, data, ends) {\n  var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex(modifiers, 'name', ends));\n\n  modifiersToRun.forEach(function (modifier) {\n    if (modifier['function']) {\n      // eslint-disable-line dot-notation\n      console.warn('`modifier.function` is deprecated, use `modifier.fn`!');\n    }\n    var fn = modifier['function'] || modifier.fn; // eslint-disable-line dot-notation\n    if (modifier.enabled && isFunction(fn)) {\n      // Add properties to offsets to make them a complete clientRect object\n      // we do this before each modifier to make sure the previous one doesn't\n      // mess with these values\n      data.offsets.popper = getClientRect(data.offsets.popper);\n      data.offsets.reference = getClientRect(data.offsets.reference);\n\n      data = fn(data, modifier);\n    }\n  });\n\n  return data;\n}\n\n/**\n * Updates the position of the popper, computing the new offsets and applying\n * the new style.<br />\n * Prefer `scheduleUpdate` over `update` because of performance reasons.\n * @method\n * @memberof Popper\n */\nfunction update() {\n  // if popper is destroyed, don't perform any further update\n  if (this.state.isDestroyed) {\n    return;\n  }\n\n  var data = {\n    instance: this,\n    styles: {},\n    arrowStyles: {},\n    attributes: {},\n    flipped: false,\n    offsets: {}\n  };\n\n  // compute reference element offsets\n  data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference, this.options.positionFixed);\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);\n\n  // store the computed placement inside `originalPlacement`\n  data.originalPlacement = data.placement;\n\n  data.positionFixed = this.options.positionFixed;\n\n  // compute the popper offsets\n  data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);\n\n  data.offsets.popper.position = this.options.positionFixed ? 'fixed' : 'absolute';\n\n  // run the modifiers\n  data = runModifiers(this.modifiers, data);\n\n  // the first `update` will call `onCreate` callback\n  // the other ones will call `onUpdate` callback\n  if (!this.state.isCreated) {\n    this.state.isCreated = true;\n    this.options.onCreate(data);\n  } else {\n    this.options.onUpdate(data);\n  }\n}\n\n/**\n * Helper used to know if the given modifier is enabled.\n * @method\n * @memberof Popper.Utils\n * @returns {Boolean}\n */\nfunction isModifierEnabled(modifiers, modifierName) {\n  return modifiers.some(function (_ref) {\n    var name = _ref.name,\n        enabled = _ref.enabled;\n    return enabled && name === modifierName;\n  });\n}\n\n/**\n * Get the prefixed supported property name\n * @method\n * @memberof Popper.Utils\n * @argument {String} property (camelCase)\n * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)\n */\nfunction getSupportedPropertyName(property) {\n  var prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];\n  var upperProp = property.charAt(0).toUpperCase() + property.slice(1);\n\n  for (var i = 0; i < prefixes.length; i++) {\n    var prefix = prefixes[i];\n    var toCheck = prefix ? '' + prefix + upperProp : property;\n    if (typeof document.body.style[toCheck] !== 'undefined') {\n      return toCheck;\n    }\n  }\n  return null;\n}\n\n/**\n * Destroys the popper.\n * @method\n * @memberof Popper\n */\nfunction destroy() {\n  this.state.isDestroyed = true;\n\n  // touch DOM only if `applyStyle` modifier is enabled\n  if (isModifierEnabled(this.modifiers, 'applyStyle')) {\n    this.popper.removeAttribute('x-placement');\n    this.popper.style.position = '';\n    this.popper.style.top = '';\n    this.popper.style.left = '';\n    this.popper.style.right = '';\n    this.popper.style.bottom = '';\n    this.popper.style.willChange = '';\n    this.popper.style[getSupportedPropertyName('transform')] = '';\n  }\n\n  this.disableEventListeners();\n\n  // remove the popper if user explicitly asked for the deletion on destroy\n  // do not use `remove` because IE11 doesn't support it\n  if (this.options.removeOnDestroy) {\n    this.popper.parentNode.removeChild(this.popper);\n  }\n  return this;\n}\n\n/**\n * Get the window associated with the element\n * @argument {Element} element\n * @returns {Window}\n */\nfunction getWindow(element) {\n  var ownerDocument = element.ownerDocument;\n  return ownerDocument ? ownerDocument.defaultView : window;\n}\n\nfunction attachToScrollParents(scrollParent, event, callback, scrollParents) {\n  var isBody = scrollParent.nodeName === 'BODY';\n  var target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;\n  target.addEventListener(event, callback, { passive: true });\n\n  if (!isBody) {\n    attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);\n  }\n  scrollParents.push(target);\n}\n\n/**\n * Setup needed event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nfunction setupEventListeners(reference, options, state, updateBound) {\n  // Resize event listener on window\n  state.updateBound = updateBound;\n  getWindow(reference).addEventListener('resize', state.updateBound, { passive: true });\n\n  // Scroll event listener on scroll parents\n  var scrollElement = getScrollParent(reference);\n  attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents);\n  state.scrollElement = scrollElement;\n  state.eventsEnabled = true;\n\n  return state;\n}\n\n/**\n * It will add resize/scroll events and start recalculating\n * position of the popper element when they are triggered.\n * @method\n * @memberof Popper\n */\nfunction enableEventListeners() {\n  if (!this.state.eventsEnabled) {\n    this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);\n  }\n}\n\n/**\n * Remove event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nfunction removeEventListeners(reference, state) {\n  // Remove resize event listener on window\n  getWindow(reference).removeEventListener('resize', state.updateBound);\n\n  // Remove scroll event listener on scroll parents\n  state.scrollParents.forEach(function (target) {\n    target.removeEventListener('scroll', state.updateBound);\n  });\n\n  // Reset state\n  state.updateBound = null;\n  state.scrollParents = [];\n  state.scrollElement = null;\n  state.eventsEnabled = false;\n  return state;\n}\n\n/**\n * It will remove resize/scroll events and won't recalculate popper position\n * when they are triggered. It also won't trigger `onUpdate` callback anymore,\n * unless you call `update` method manually.\n * @method\n * @memberof Popper\n */\nfunction disableEventListeners() {\n  if (this.state.eventsEnabled) {\n    cancelAnimationFrame(this.scheduleUpdate);\n    this.state = removeEventListeners(this.reference, this.state);\n  }\n}\n\n/**\n * Tells if a given input is a number\n * @method\n * @memberof Popper.Utils\n * @param {*} input to check\n * @return {Boolean}\n */\nfunction isNumeric(n) {\n  return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);\n}\n\n/**\n * Set the style to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the style to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nfunction setStyles(element, styles) {\n  Object.keys(styles).forEach(function (prop) {\n    var unit = '';\n    // add unit if the value is numeric and is one of the following\n    if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {\n      unit = 'px';\n    }\n    element.style[prop] = styles[prop] + unit;\n  });\n}\n\n/**\n * Set the attributes to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the attributes to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nfunction setAttributes(element, attributes) {\n  Object.keys(attributes).forEach(function (prop) {\n    var value = attributes[prop];\n    if (value !== false) {\n      element.setAttribute(prop, attributes[prop]);\n    } else {\n      element.removeAttribute(prop);\n    }\n  });\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} data.styles - List of style properties - values to apply to popper element\n * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The same data object\n */\nfunction applyStyle(data) {\n  // any property present in `data.styles` will be applied to the popper,\n  // in this way we can make the 3rd party modifiers add custom styles to it\n  // Be aware, modifiers could override the properties defined in the previous\n  // lines of this modifier!\n  setStyles(data.instance.popper, data.styles);\n\n  // any property present in `data.attributes` will be applied to the popper,\n  // they will be set as HTML attributes of the element\n  setAttributes(data.instance.popper, data.attributes);\n\n  // if arrowElement is defined and arrowStyles has some properties\n  if (data.arrowElement && Object.keys(data.arrowStyles).length) {\n    setStyles(data.arrowElement, data.arrowStyles);\n  }\n\n  return data;\n}\n\n/**\n * Set the x-placement attribute before everything else because it could be used\n * to add margins to the popper margins needs to be calculated to get the\n * correct popper offsets.\n * @method\n * @memberof Popper.modifiers\n * @param {HTMLElement} reference - The reference element used to position the popper\n * @param {HTMLElement} popper - The HTML element used as popper\n * @param {Object} options - Popper.js options\n */\nfunction applyStyleOnLoad(reference, popper, options, modifierOptions, state) {\n  // compute reference element offsets\n  var referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed);\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);\n\n  popper.setAttribute('x-placement', placement);\n\n  // Apply `position` to popper before anything else because\n  // without the position applied we can't guarantee correct computations\n  setStyles(popper, { position: options.positionFixed ? 'fixed' : 'absolute' });\n\n  return options;\n}\n\n/**\n * @function\n * @memberof Popper.Utils\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Boolean} shouldRound - If the offsets should be rounded at all\n * @returns {Object} The popper's position offsets rounded\n *\n * The tale of pixel-perfect positioning. It's still not 100% perfect, but as\n * good as it can be within reason.\n * Discussion here: https://github.com/FezVrasta/popper.js/pull/715\n *\n * Low DPI screens cause a popper to be blurry if not using full pixels (Safari\n * as well on High DPI screens).\n *\n * Firefox prefers no rounding for positioning and does not have blurriness on\n * high DPI screens.\n *\n * Only horizontal placement and left/right values need to be considered.\n */\nfunction getRoundedOffsets(data, shouldRound) {\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n  var round = Math.round,\n      floor = Math.floor;\n\n  var noRound = function noRound(v) {\n    return v;\n  };\n\n  var referenceWidth = round(reference.width);\n  var popperWidth = round(popper.width);\n\n  var isVertical = ['left', 'right'].indexOf(data.placement) !== -1;\n  var isVariation = data.placement.indexOf('-') !== -1;\n  var sameWidthParity = referenceWidth % 2 === popperWidth % 2;\n  var bothOddWidth = referenceWidth % 2 === 1 && popperWidth % 2 === 1;\n\n  var horizontalToInteger = !shouldRound ? noRound : isVertical || isVariation || sameWidthParity ? round : floor;\n  var verticalToInteger = !shouldRound ? noRound : round;\n\n  return {\n    left: horizontalToInteger(bothOddWidth && !isVariation && shouldRound ? popper.left - 1 : popper.left),\n    top: verticalToInteger(popper.top),\n    bottom: verticalToInteger(popper.bottom),\n    right: horizontalToInteger(popper.right)\n  };\n}\n\nvar isFirefox = isBrowser && /Firefox/i.test(navigator.userAgent);\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction computeStyle(data, options) {\n  var x = options.x,\n      y = options.y;\n  var popper = data.offsets.popper;\n\n  // Remove this legacy support in Popper.js v2\n\n  var legacyGpuAccelerationOption = find(data.instance.modifiers, function (modifier) {\n    return modifier.name === 'applyStyle';\n  }).gpuAcceleration;\n  if (legacyGpuAccelerationOption !== undefined) {\n    console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');\n  }\n  var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;\n\n  var offsetParent = getOffsetParent(data.instance.popper);\n  var offsetParentRect = getBoundingClientRect(offsetParent);\n\n  // Styles\n  var styles = {\n    position: popper.position\n  };\n\n  var offsets = getRoundedOffsets(data, window.devicePixelRatio < 2 || !isFirefox);\n\n  var sideA = x === 'bottom' ? 'top' : 'bottom';\n  var sideB = y === 'right' ? 'left' : 'right';\n\n  // if gpuAcceleration is set to `true` and transform is supported,\n  //  we use `translate3d` to apply the position to the popper we\n  // automatically use the supported prefixed version if needed\n  var prefixedProperty = getSupportedPropertyName('transform');\n\n  // now, let's make a step back and look at this code closely (wtf?)\n  // If the content of the popper grows once it's been positioned, it\n  // may happen that the popper gets misplaced because of the new content\n  // overflowing its reference element\n  // To avoid this problem, we provide two options (x and y), which allow\n  // the consumer to define the offset origin.\n  // If we position a popper on top of a reference element, we can set\n  // `x` to `top` to make the popper grow towards its top instead of\n  // its bottom.\n  var left = void 0,\n      top = void 0;\n  if (sideA === 'bottom') {\n    // when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)\n    // and not the bottom of the html element\n    if (offsetParent.nodeName === 'HTML') {\n      top = -offsetParent.clientHeight + offsets.bottom;\n    } else {\n      top = -offsetParentRect.height + offsets.bottom;\n    }\n  } else {\n    top = offsets.top;\n  }\n  if (sideB === 'right') {\n    if (offsetParent.nodeName === 'HTML') {\n      left = -offsetParent.clientWidth + offsets.right;\n    } else {\n      left = -offsetParentRect.width + offsets.right;\n    }\n  } else {\n    left = offsets.left;\n  }\n  if (gpuAcceleration && prefixedProperty) {\n    styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';\n    styles[sideA] = 0;\n    styles[sideB] = 0;\n    styles.willChange = 'transform';\n  } else {\n    // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties\n    var invertTop = sideA === 'bottom' ? -1 : 1;\n    var invertLeft = sideB === 'right' ? -1 : 1;\n    styles[sideA] = top * invertTop;\n    styles[sideB] = left * invertLeft;\n    styles.willChange = sideA + ', ' + sideB;\n  }\n\n  // Attributes\n  var attributes = {\n    'x-placement': data.placement\n  };\n\n  // Update `data` attributes, styles and arrowStyles\n  data.attributes = _extends({}, attributes, data.attributes);\n  data.styles = _extends({}, styles, data.styles);\n  data.arrowStyles = _extends({}, data.offsets.arrow, data.arrowStyles);\n\n  return data;\n}\n\n/**\n * Helper used to know if the given modifier depends from another one.<br />\n * It checks if the needed modifier is listed and enabled.\n * @method\n * @memberof Popper.Utils\n * @param {Array} modifiers - list of modifiers\n * @param {String} requestingName - name of requesting modifier\n * @param {String} requestedName - name of requested modifier\n * @returns {Boolean}\n */\nfunction isModifierRequired(modifiers, requestingName, requestedName) {\n  var requesting = find(modifiers, function (_ref) {\n    var name = _ref.name;\n    return name === requestingName;\n  });\n\n  var isRequired = !!requesting && modifiers.some(function (modifier) {\n    return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;\n  });\n\n  if (!isRequired) {\n    var _requesting = '`' + requestingName + '`';\n    var requested = '`' + requestedName + '`';\n    console.warn(requested + ' modifier is required by ' + _requesting + ' modifier in order to work, be sure to include it before ' + _requesting + '!');\n  }\n  return isRequired;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction arrow(data, options) {\n  var _data$offsets$arrow;\n\n  // arrow depends on keepTogether in order to work\n  if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {\n    return data;\n  }\n\n  var arrowElement = options.element;\n\n  // if arrowElement is a string, suppose it's a CSS selector\n  if (typeof arrowElement === 'string') {\n    arrowElement = data.instance.popper.querySelector(arrowElement);\n\n    // if arrowElement is not found, don't run the modifier\n    if (!arrowElement) {\n      return data;\n    }\n  } else {\n    // if the arrowElement isn't a query selector we must check that the\n    // provided DOM node is child of its popper node\n    if (!data.instance.popper.contains(arrowElement)) {\n      console.warn('WARNING: `arrow.element` must be child of its popper element!');\n      return data;\n    }\n  }\n\n  var placement = data.placement.split('-')[0];\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var isVertical = ['left', 'right'].indexOf(placement) !== -1;\n\n  var len = isVertical ? 'height' : 'width';\n  var sideCapitalized = isVertical ? 'Top' : 'Left';\n  var side = sideCapitalized.toLowerCase();\n  var altSide = isVertical ? 'left' : 'top';\n  var opSide = isVertical ? 'bottom' : 'right';\n  var arrowElementSize = getOuterSizes(arrowElement)[len];\n\n  //\n  // extends keepTogether behavior making sure the popper and its\n  // reference have enough pixels in conjunction\n  //\n\n  // top/left side\n  if (reference[opSide] - arrowElementSize < popper[side]) {\n    data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);\n  }\n  // bottom/right side\n  if (reference[side] + arrowElementSize > popper[opSide]) {\n    data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];\n  }\n  data.offsets.popper = getClientRect(data.offsets.popper);\n\n  // compute center of the popper\n  var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;\n\n  // Compute the sideValue using the updated popper offsets\n  // take popper margin in account because we don't have this info available\n  var css = getStyleComputedProperty(data.instance.popper);\n  var popperMarginSide = parseFloat(css['margin' + sideCapitalized]);\n  var popperBorderSide = parseFloat(css['border' + sideCapitalized + 'Width']);\n  var sideValue = center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;\n\n  // prevent arrowElement from being placed not contiguously to its popper\n  sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);\n\n  data.arrowElement = arrowElement;\n  data.offsets.arrow = (_data$offsets$arrow = {}, defineProperty(_data$offsets$arrow, side, Math.round(sideValue)), defineProperty(_data$offsets$arrow, altSide, ''), _data$offsets$arrow);\n\n  return data;\n}\n\n/**\n * Get the opposite placement variation of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement variation\n * @returns {String} flipped placement variation\n */\nfunction getOppositeVariation(variation) {\n  if (variation === 'end') {\n    return 'start';\n  } else if (variation === 'start') {\n    return 'end';\n  }\n  return variation;\n}\n\n/**\n * List of accepted placements to use as values of the `placement` option.<br />\n * Valid placements are:\n * - `auto`\n * - `top`\n * - `right`\n * - `bottom`\n * - `left`\n *\n * Each placement can have a variation from this list:\n * - `-start`\n * - `-end`\n *\n * Variations are interpreted easily if you think of them as the left to right\n * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`\n * is right.<br />\n * Vertically (`left` and `right`), `start` is top and `end` is bottom.\n *\n * Some valid examples are:\n * - `top-end` (on top of reference, right aligned)\n * - `right-start` (on right of reference, top aligned)\n * - `bottom` (on bottom, centered)\n * - `auto-end` (on the side with more space available, alignment depends by placement)\n *\n * @static\n * @type {Array}\n * @enum {String}\n * @readonly\n * @method placements\n * @memberof Popper\n */\nvar placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'];\n\n// Get rid of `auto` `auto-start` and `auto-end`\nvar validPlacements = placements.slice(3);\n\n/**\n * Given an initial placement, returns all the subsequent placements\n * clockwise (or counter-clockwise).\n *\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement - A valid placement (it accepts variations)\n * @argument {Boolean} counter - Set to true to walk the placements counterclockwise\n * @returns {Array} placements including their variations\n */\nfunction clockwise(placement) {\n  var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var index = validPlacements.indexOf(placement);\n  var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));\n  return counter ? arr.reverse() : arr;\n}\n\nvar BEHAVIORS = {\n  FLIP: 'flip',\n  CLOCKWISE: 'clockwise',\n  COUNTERCLOCKWISE: 'counterclockwise'\n};\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction flip(data, options) {\n  // if `inner` modifier is enabled, we can't use the `flip` modifier\n  if (isModifierEnabled(data.instance.modifiers, 'inner')) {\n    return data;\n  }\n\n  if (data.flipped && data.placement === data.originalPlacement) {\n    // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides\n    return data;\n  }\n\n  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement, data.positionFixed);\n\n  var placement = data.placement.split('-')[0];\n  var placementOpposite = getOppositePlacement(placement);\n  var variation = data.placement.split('-')[1] || '';\n\n  var flipOrder = [];\n\n  switch (options.behavior) {\n    case BEHAVIORS.FLIP:\n      flipOrder = [placement, placementOpposite];\n      break;\n    case BEHAVIORS.CLOCKWISE:\n      flipOrder = clockwise(placement);\n      break;\n    case BEHAVIORS.COUNTERCLOCKWISE:\n      flipOrder = clockwise(placement, true);\n      break;\n    default:\n      flipOrder = options.behavior;\n  }\n\n  flipOrder.forEach(function (step, index) {\n    if (placement !== step || flipOrder.length === index + 1) {\n      return data;\n    }\n\n    placement = data.placement.split('-')[0];\n    placementOpposite = getOppositePlacement(placement);\n\n    var popperOffsets = data.offsets.popper;\n    var refOffsets = data.offsets.reference;\n\n    // using floor because the reference offsets may contain decimals we are not going to consider here\n    var floor = Math.floor;\n    var overlapsRef = placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom);\n\n    var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);\n    var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);\n    var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);\n    var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);\n\n    var overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom;\n\n    // flip the variation if required\n    var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n\n    // flips variation if reference element overflows boundaries\n    var flippedVariationByRef = !!options.flipVariations && (isVertical && variation === 'start' && overflowsLeft || isVertical && variation === 'end' && overflowsRight || !isVertical && variation === 'start' && overflowsTop || !isVertical && variation === 'end' && overflowsBottom);\n\n    // flips variation if popper content overflows boundaries\n    var flippedVariationByContent = !!options.flipVariationsByContent && (isVertical && variation === 'start' && overflowsRight || isVertical && variation === 'end' && overflowsLeft || !isVertical && variation === 'start' && overflowsBottom || !isVertical && variation === 'end' && overflowsTop);\n\n    var flippedVariation = flippedVariationByRef || flippedVariationByContent;\n\n    if (overlapsRef || overflowsBoundaries || flippedVariation) {\n      // this boolean to detect any flip loop\n      data.flipped = true;\n\n      if (overlapsRef || overflowsBoundaries) {\n        placement = flipOrder[index + 1];\n      }\n\n      if (flippedVariation) {\n        variation = getOppositeVariation(variation);\n      }\n\n      data.placement = placement + (variation ? '-' + variation : '');\n\n      // this object contains `position`, we want to preserve it along with\n      // any additional property we may add in the future\n      data.offsets.popper = _extends({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));\n\n      data = runModifiers(data.instance.modifiers, data, 'flip');\n    }\n  });\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction keepTogether(data) {\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var placement = data.placement.split('-')[0];\n  var floor = Math.floor;\n  var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n  var side = isVertical ? 'right' : 'bottom';\n  var opSide = isVertical ? 'left' : 'top';\n  var measurement = isVertical ? 'width' : 'height';\n\n  if (popper[side] < floor(reference[opSide])) {\n    data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];\n  }\n  if (popper[opSide] > floor(reference[side])) {\n    data.offsets.popper[opSide] = floor(reference[side]);\n  }\n\n  return data;\n}\n\n/**\n * Converts a string containing value + unit into a px value number\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} str - Value + unit string\n * @argument {String} measurement - `height` or `width`\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @returns {Number|String}\n * Value in pixels, or original string if no values were extracted\n */\nfunction toValue(str, measurement, popperOffsets, referenceOffsets) {\n  // separate value from unit\n  var split = str.match(/((?:\\-|\\+)?\\d*\\.?\\d*)(.*)/);\n  var value = +split[1];\n  var unit = split[2];\n\n  // If it's not a number it's an operator, I guess\n  if (!value) {\n    return str;\n  }\n\n  if (unit.indexOf('%') === 0) {\n    var element = void 0;\n    switch (unit) {\n      case '%p':\n        element = popperOffsets;\n        break;\n      case '%':\n      case '%r':\n      default:\n        element = referenceOffsets;\n    }\n\n    var rect = getClientRect(element);\n    return rect[measurement] / 100 * value;\n  } else if (unit === 'vh' || unit === 'vw') {\n    // if is a vh or vw, we calculate the size based on the viewport\n    var size = void 0;\n    if (unit === 'vh') {\n      size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\n    } else {\n      size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n    }\n    return size / 100 * value;\n  } else {\n    // if is an explicit pixel unit, we get rid of the unit and keep the value\n    // if is an implicit unit, it's px, and we return just the value\n    return value;\n  }\n}\n\n/**\n * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} offset\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @argument {String} basePlacement\n * @returns {Array} a two cells array with x and y offsets in numbers\n */\nfunction parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {\n  var offsets = [0, 0];\n\n  // Use height if placement is left or right and index is 0 otherwise use width\n  // in this way the first offset will use an axis and the second one\n  // will use the other one\n  var useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;\n\n  // Split the offset string to obtain a list of values and operands\n  // The regex addresses values with the plus or minus sign in front (+10, -20, etc)\n  var fragments = offset.split(/(\\+|\\-)/).map(function (frag) {\n    return frag.trim();\n  });\n\n  // Detect if the offset string contains a pair of values or a single one\n  // they could be separated by comma or space\n  var divider = fragments.indexOf(find(fragments, function (frag) {\n    return frag.search(/,|\\s/) !== -1;\n  }));\n\n  if (fragments[divider] && fragments[divider].indexOf(',') === -1) {\n    console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');\n  }\n\n  // If divider is found, we divide the list of values and operands to divide\n  // them by ofset X and Y.\n  var splitRegex = /\\s*,\\s*|\\s+/;\n  var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];\n\n  // Convert the values with units to absolute pixels to allow our computations\n  ops = ops.map(function (op, index) {\n    // Most of the units rely on the orientation of the popper\n    var measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width';\n    var mergeWithPrevious = false;\n    return op\n    // This aggregates any `+` or `-` sign that aren't considered operators\n    // e.g.: 10 + +5 => [10, +, +5]\n    .reduce(function (a, b) {\n      if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {\n        a[a.length - 1] = b;\n        mergeWithPrevious = true;\n        return a;\n      } else if (mergeWithPrevious) {\n        a[a.length - 1] += b;\n        mergeWithPrevious = false;\n        return a;\n      } else {\n        return a.concat(b);\n      }\n    }, [])\n    // Here we convert the string values into number values (in px)\n    .map(function (str) {\n      return toValue(str, measurement, popperOffsets, referenceOffsets);\n    });\n  });\n\n  // Loop trough the offsets arrays and execute the operations\n  ops.forEach(function (op, index) {\n    op.forEach(function (frag, index2) {\n      if (isNumeric(frag)) {\n        offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);\n      }\n    });\n  });\n  return offsets;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @argument {Number|String} options.offset=0\n * The offset value as described in the modifier description\n * @returns {Object} The data object, properly modified\n */\nfunction offset(data, _ref) {\n  var offset = _ref.offset;\n  var placement = data.placement,\n      _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var basePlacement = placement.split('-')[0];\n\n  var offsets = void 0;\n  if (isNumeric(+offset)) {\n    offsets = [+offset, 0];\n  } else {\n    offsets = parseOffset(offset, popper, reference, basePlacement);\n  }\n\n  if (basePlacement === 'left') {\n    popper.top += offsets[0];\n    popper.left -= offsets[1];\n  } else if (basePlacement === 'right') {\n    popper.top += offsets[0];\n    popper.left += offsets[1];\n  } else if (basePlacement === 'top') {\n    popper.left += offsets[0];\n    popper.top -= offsets[1];\n  } else if (basePlacement === 'bottom') {\n    popper.left += offsets[0];\n    popper.top += offsets[1];\n  }\n\n  data.popper = popper;\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction preventOverflow(data, options) {\n  var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);\n\n  // If offsetParent is the reference element, we really want to\n  // go one step up and use the next offsetParent as reference to\n  // avoid to make this modifier completely useless and look like broken\n  if (data.instance.reference === boundariesElement) {\n    boundariesElement = getOffsetParent(boundariesElement);\n  }\n\n  // NOTE: DOM access here\n  // resets the popper's position so that the document size can be calculated excluding\n  // the size of the popper element itself\n  var transformProp = getSupportedPropertyName('transform');\n  var popperStyles = data.instance.popper.style; // assignment to help minification\n  var top = popperStyles.top,\n      left = popperStyles.left,\n      transform = popperStyles[transformProp];\n\n  popperStyles.top = '';\n  popperStyles.left = '';\n  popperStyles[transformProp] = '';\n\n  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement, data.positionFixed);\n\n  // NOTE: DOM access here\n  // restores the original style properties after the offsets have been computed\n  popperStyles.top = top;\n  popperStyles.left = left;\n  popperStyles[transformProp] = transform;\n\n  options.boundaries = boundaries;\n\n  var order = options.priority;\n  var popper = data.offsets.popper;\n\n  var check = {\n    primary: function primary(placement) {\n      var value = popper[placement];\n      if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {\n        value = Math.max(popper[placement], boundaries[placement]);\n      }\n      return defineProperty({}, placement, value);\n    },\n    secondary: function secondary(placement) {\n      var mainSide = placement === 'right' ? 'left' : 'top';\n      var value = popper[mainSide];\n      if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {\n        value = Math.min(popper[mainSide], boundaries[placement] - (placement === 'right' ? popper.width : popper.height));\n      }\n      return defineProperty({}, mainSide, value);\n    }\n  };\n\n  order.forEach(function (placement) {\n    var side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';\n    popper = _extends({}, popper, check[side](placement));\n  });\n\n  data.offsets.popper = popper;\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction shift(data) {\n  var placement = data.placement;\n  var basePlacement = placement.split('-')[0];\n  var shiftvariation = placement.split('-')[1];\n\n  // if shift shiftvariation is specified, run the modifier\n  if (shiftvariation) {\n    var _data$offsets = data.offsets,\n        reference = _data$offsets.reference,\n        popper = _data$offsets.popper;\n\n    var isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;\n    var side = isVertical ? 'left' : 'top';\n    var measurement = isVertical ? 'width' : 'height';\n\n    var shiftOffsets = {\n      start: defineProperty({}, side, reference[side]),\n      end: defineProperty({}, side, reference[side] + reference[measurement] - popper[measurement])\n    };\n\n    data.offsets.popper = _extends({}, popper, shiftOffsets[shiftvariation]);\n  }\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction hide(data) {\n  if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {\n    return data;\n  }\n\n  var refRect = data.offsets.reference;\n  var bound = find(data.instance.modifiers, function (modifier) {\n    return modifier.name === 'preventOverflow';\n  }).boundaries;\n\n  if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === true) {\n      return data;\n    }\n\n    data.hide = true;\n    data.attributes['x-out-of-boundaries'] = '';\n  } else {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === false) {\n      return data;\n    }\n\n    data.hide = false;\n    data.attributes['x-out-of-boundaries'] = false;\n  }\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction inner(data) {\n  var placement = data.placement;\n  var basePlacement = placement.split('-')[0];\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;\n\n  var subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;\n\n  popper[isHoriz ? 'left' : 'top'] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);\n\n  data.placement = getOppositePlacement(placement);\n  data.offsets.popper = getClientRect(popper);\n\n  return data;\n}\n\n/**\n * Modifier function, each modifier can have a function of this type assigned\n * to its `fn` property.<br />\n * These functions will be called on each update, this means that you must\n * make sure they are performant enough to avoid performance bottlenecks.\n *\n * @function ModifierFn\n * @argument {dataObject} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {dataObject} The data object, properly modified\n */\n\n/**\n * Modifiers are plugins used to alter the behavior of your poppers.<br />\n * Popper.js uses a set of 9 modifiers to provide all the basic functionalities\n * needed by the library.\n *\n * Usually you don't want to override the `order`, `fn` and `onLoad` props.\n * All the other properties are configurations that could be tweaked.\n * @namespace modifiers\n */\nvar modifiers = {\n  /**\n   * Modifier used to shift the popper on the start or end of its reference\n   * element.<br />\n   * It will read the variation of the `placement` property.<br />\n   * It can be one either `-end` or `-start`.\n   * @memberof modifiers\n   * @inner\n   */\n  shift: {\n    /** @prop {number} order=100 - Index used to define the order of execution */\n    order: 100,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: shift\n  },\n\n  /**\n   * The `offset` modifier can shift your popper on both its axis.\n   *\n   * It accepts the following units:\n   * - `px` or unit-less, interpreted as pixels\n   * - `%` or `%r`, percentage relative to the length of the reference element\n   * - `%p`, percentage relative to the length of the popper element\n   * - `vw`, CSS viewport width unit\n   * - `vh`, CSS viewport height unit\n   *\n   * For length is intended the main axis relative to the placement of the popper.<br />\n   * This means that if the placement is `top` or `bottom`, the length will be the\n   * `width`. In case of `left` or `right`, it will be the `height`.\n   *\n   * You can provide a single value (as `Number` or `String`), or a pair of values\n   * as `String` divided by a comma or one (or more) white spaces.<br />\n   * The latter is a deprecated method because it leads to confusion and will be\n   * removed in v2.<br />\n   * Additionally, it accepts additions and subtractions between different units.\n   * Note that multiplications and divisions aren't supported.\n   *\n   * Valid examples are:\n   * ```\n   * 10\n   * '10%'\n   * '10, 10'\n   * '10%, 10'\n   * '10 + 10%'\n   * '10 - 5vh + 3%'\n   * '-10px + 5vh, 5px - 6%'\n   * ```\n   * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap\n   * > with their reference element, unfortunately, you will have to disable the `flip` modifier.\n   * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  offset: {\n    /** @prop {number} order=200 - Index used to define the order of execution */\n    order: 200,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: offset,\n    /** @prop {Number|String} offset=0\n     * The offset value as described in the modifier description\n     */\n    offset: 0\n  },\n\n  /**\n   * Modifier used to prevent the popper from being positioned outside the boundary.\n   *\n   * A scenario exists where the reference itself is not within the boundaries.<br />\n   * We can say it has \"escaped the boundaries\" — or just \"escaped\".<br />\n   * In this case we need to decide whether the popper should either:\n   *\n   * - detach from the reference and remain \"trapped\" in the boundaries, or\n   * - if it should ignore the boundary and \"escape with its reference\"\n   *\n   * When `escapeWithReference` is set to`true` and reference is completely\n   * outside its boundaries, the popper will overflow (or completely leave)\n   * the boundaries in order to remain attached to the edge of the reference.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  preventOverflow: {\n    /** @prop {number} order=300 - Index used to define the order of execution */\n    order: 300,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: preventOverflow,\n    /**\n     * @prop {Array} [priority=['left','right','top','bottom']]\n     * Popper will try to prevent overflow following these priorities by default,\n     * then, it could overflow on the left and on top of the `boundariesElement`\n     */\n    priority: ['left', 'right', 'top', 'bottom'],\n    /**\n     * @prop {number} padding=5\n     * Amount of pixel used to define a minimum distance between the boundaries\n     * and the popper. This makes sure the popper always has a little padding\n     * between the edges of its container\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='scrollParent'\n     * Boundaries used by the modifier. Can be `scrollParent`, `window`,\n     * `viewport` or any DOM element.\n     */\n    boundariesElement: 'scrollParent'\n  },\n\n  /**\n   * Modifier used to make sure the reference and its popper stay near each other\n   * without leaving any gap between the two. Especially useful when the arrow is\n   * enabled and you want to ensure that it points to its reference element.\n   * It cares only about the first axis. You can still have poppers with margin\n   * between the popper and its reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  keepTogether: {\n    /** @prop {number} order=400 - Index used to define the order of execution */\n    order: 400,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: keepTogether\n  },\n\n  /**\n   * This modifier is used to move the `arrowElement` of the popper to make\n   * sure it is positioned between the reference element and its popper element.\n   * It will read the outer size of the `arrowElement` node to detect how many\n   * pixels of conjunction are needed.\n   *\n   * It has no effect if no `arrowElement` is provided.\n   * @memberof modifiers\n   * @inner\n   */\n  arrow: {\n    /** @prop {number} order=500 - Index used to define the order of execution */\n    order: 500,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: arrow,\n    /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */\n    element: '[x-arrow]'\n  },\n\n  /**\n   * Modifier used to flip the popper's placement when it starts to overlap its\n   * reference element.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   *\n   * **NOTE:** this modifier will interrupt the current update cycle and will\n   * restart it if it detects the need to flip the placement.\n   * @memberof modifiers\n   * @inner\n   */\n  flip: {\n    /** @prop {number} order=600 - Index used to define the order of execution */\n    order: 600,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: flip,\n    /**\n     * @prop {String|Array} behavior='flip'\n     * The behavior used to change the popper's placement. It can be one of\n     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid\n     * placements (with optional variations)\n     */\n    behavior: 'flip',\n    /**\n     * @prop {number} padding=5\n     * The popper will flip if it hits the edges of the `boundariesElement`\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='viewport'\n     * The element which will define the boundaries of the popper position.\n     * The popper will never be placed outside of the defined boundaries\n     * (except if `keepTogether` is enabled)\n     */\n    boundariesElement: 'viewport',\n    /**\n     * @prop {Boolean} flipVariations=false\n     * The popper will switch placement variation between `-start` and `-end` when\n     * the reference element overlaps its boundaries.\n     *\n     * The original placement should have a set variation.\n     */\n    flipVariations: false,\n    /**\n     * @prop {Boolean} flipVariationsByContent=false\n     * The popper will switch placement variation between `-start` and `-end` when\n     * the popper element overlaps its reference boundaries.\n     *\n     * The original placement should have a set variation.\n     */\n    flipVariationsByContent: false\n  },\n\n  /**\n   * Modifier used to make the popper flow toward the inner of the reference element.\n   * By default, when this modifier is disabled, the popper will be placed outside\n   * the reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  inner: {\n    /** @prop {number} order=700 - Index used to define the order of execution */\n    order: 700,\n    /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */\n    enabled: false,\n    /** @prop {ModifierFn} */\n    fn: inner\n  },\n\n  /**\n   * Modifier used to hide the popper when its reference element is outside of the\n   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can\n   * be used to hide with a CSS selector the popper when its reference is\n   * out of boundaries.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   * @memberof modifiers\n   * @inner\n   */\n  hide: {\n    /** @prop {number} order=800 - Index used to define the order of execution */\n    order: 800,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: hide\n  },\n\n  /**\n   * Computes the style that will be applied to the popper element to gets\n   * properly positioned.\n   *\n   * Note that this modifier will not touch the DOM, it just prepares the styles\n   * so that `applyStyle` modifier can apply it. This separation is useful\n   * in case you need to replace `applyStyle` with a custom implementation.\n   *\n   * This modifier has `850` as `order` value to maintain backward compatibility\n   * with previous versions of Popper.js. Expect the modifiers ordering method\n   * to change in future major versions of the library.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  computeStyle: {\n    /** @prop {number} order=850 - Index used to define the order of execution */\n    order: 850,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: computeStyle,\n    /**\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3D transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties\n     */\n    gpuAcceleration: true,\n    /**\n     * @prop {string} [x='bottom']\n     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.\n     * Change this if your popper should grow in a direction different from `bottom`\n     */\n    x: 'bottom',\n    /**\n     * @prop {string} [x='left']\n     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.\n     * Change this if your popper should grow in a direction different from `right`\n     */\n    y: 'right'\n  },\n\n  /**\n   * Applies the computed styles to the popper element.\n   *\n   * All the DOM manipulations are limited to this modifier. This is useful in case\n   * you want to integrate Popper.js inside a framework or view library and you\n   * want to delegate all the DOM manipulations to it.\n   *\n   * Note that if you disable this modifier, you must make sure the popper element\n   * has its position set to `absolute` before Popper.js can do its work!\n   *\n   * Just disable this modifier and define your own to achieve the desired effect.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  applyStyle: {\n    /** @prop {number} order=900 - Index used to define the order of execution */\n    order: 900,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: applyStyle,\n    /** @prop {Function} */\n    onLoad: applyStyleOnLoad,\n    /**\n     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3D transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties\n     */\n    gpuAcceleration: undefined\n  }\n};\n\n/**\n * The `dataObject` is an object containing all the information used by Popper.js.\n * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.\n * @name dataObject\n * @property {Object} data.instance The Popper.js instance\n * @property {String} data.placement Placement applied to popper\n * @property {String} data.originalPlacement Placement originally defined on init\n * @property {Boolean} data.flipped True if popper has been flipped by flip modifier\n * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper\n * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier\n * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.boundaries Offsets of the popper boundaries\n * @property {Object} data.offsets The measurements of popper, reference and arrow elements\n * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0\n */\n\n/**\n * Default options provided to Popper.js constructor.<br />\n * These can be overridden using the `options` argument of Popper.js.<br />\n * To override an option, simply pass an object with the same\n * structure of the `options` object, as the 3rd argument. For example:\n * ```\n * new Popper(ref, pop, {\n *   modifiers: {\n *     preventOverflow: { enabled: false }\n *   }\n * })\n * ```\n * @type {Object}\n * @static\n * @memberof Popper\n */\nvar Defaults = {\n  /**\n   * Popper's placement.\n   * @prop {Popper.placements} placement='bottom'\n   */\n  placement: 'bottom',\n\n  /**\n   * Set this to true if you want popper to position it self in 'fixed' mode\n   * @prop {Boolean} positionFixed=false\n   */\n  positionFixed: false,\n\n  /**\n   * Whether events (resize, scroll) are initially enabled.\n   * @prop {Boolean} eventsEnabled=true\n   */\n  eventsEnabled: true,\n\n  /**\n   * Set to true if you want to automatically remove the popper when\n   * you call the `destroy` method.\n   * @prop {Boolean} removeOnDestroy=false\n   */\n  removeOnDestroy: false,\n\n  /**\n   * Callback called when the popper is created.<br />\n   * By default, it is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onCreate}\n   */\n  onCreate: function onCreate() {},\n\n  /**\n   * Callback called when the popper is updated. This callback is not called\n   * on the initialization/creation of the popper, but only on subsequent\n   * updates.<br />\n   * By default, it is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onUpdate}\n   */\n  onUpdate: function onUpdate() {},\n\n  /**\n   * List of modifiers used to modify the offsets before they are applied to the popper.\n   * They provide most of the functionalities of Popper.js.\n   * @prop {modifiers}\n   */\n  modifiers: modifiers\n};\n\n/**\n * @callback onCreate\n * @param {dataObject} data\n */\n\n/**\n * @callback onUpdate\n * @param {dataObject} data\n */\n\n// Utils\n// Methods\nvar Popper = function () {\n  /**\n   * Creates a new Popper.js instance.\n   * @class Popper\n   * @param {Element|referenceObject} reference - The reference element used to position the popper\n   * @param {Element} popper - The HTML / XML element used as the popper\n   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)\n   * @return {Object} instance - The generated Popper.js instance\n   */\n  function Popper(reference, popper) {\n    var _this = this;\n\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    classCallCheck(this, Popper);\n\n    this.scheduleUpdate = function () {\n      return requestAnimationFrame(_this.update);\n    };\n\n    // make update() debounced, so that it only runs at most once-per-tick\n    this.update = debounce(this.update.bind(this));\n\n    // with {} we create a new object with the options inside it\n    this.options = _extends({}, Popper.Defaults, options);\n\n    // init state\n    this.state = {\n      isDestroyed: false,\n      isCreated: false,\n      scrollParents: []\n    };\n\n    // get reference and popper elements (allow jQuery wrappers)\n    this.reference = reference && reference.jquery ? reference[0] : reference;\n    this.popper = popper && popper.jquery ? popper[0] : popper;\n\n    // Deep merge modifiers options\n    this.options.modifiers = {};\n    Object.keys(_extends({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function (name) {\n      _this.options.modifiers[name] = _extends({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});\n    });\n\n    // Refactoring modifiers' list (Object => Array)\n    this.modifiers = Object.keys(this.options.modifiers).map(function (name) {\n      return _extends({\n        name: name\n      }, _this.options.modifiers[name]);\n    })\n    // sort the modifiers by order\n    .sort(function (a, b) {\n      return a.order - b.order;\n    });\n\n    // modifiers have the ability to execute arbitrary code when Popper.js get inited\n    // such code is executed in the same order of its modifier\n    // they could add new properties to their options configuration\n    // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!\n    this.modifiers.forEach(function (modifierOptions) {\n      if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {\n        modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);\n      }\n    });\n\n    // fire the first update to position the popper in the right place\n    this.update();\n\n    var eventsEnabled = this.options.eventsEnabled;\n    if (eventsEnabled) {\n      // setup event listeners, they will take care of update the position in specific situations\n      this.enableEventListeners();\n    }\n\n    this.state.eventsEnabled = eventsEnabled;\n  }\n\n  // We can't use class properties because they don't get listed in the\n  // class prototype and break stuff like Sinon stubs\n\n\n  createClass(Popper, [{\n    key: 'update',\n    value: function update$$1() {\n      return update.call(this);\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy$$1() {\n      return destroy.call(this);\n    }\n  }, {\n    key: 'enableEventListeners',\n    value: function enableEventListeners$$1() {\n      return enableEventListeners.call(this);\n    }\n  }, {\n    key: 'disableEventListeners',\n    value: function disableEventListeners$$1() {\n      return disableEventListeners.call(this);\n    }\n\n    /**\n     * Schedules an update. It will run on the next UI update available.\n     * @method scheduleUpdate\n     * @memberof Popper\n     */\n\n\n    /**\n     * Collection of utilities useful when writing custom modifiers.\n     * Starting from version 1.7, this method is available only if you\n     * include `popper-utils.js` before `popper.js`.\n     *\n     * **DEPRECATION**: This way to access PopperUtils is deprecated\n     * and will be removed in v2! Use the PopperUtils module directly instead.\n     * Due to the high instability of the methods contained in Utils, we can't\n     * guarantee them to follow semver. Use them at your own risk!\n     * @static\n     * @private\n     * @type {Object}\n     * @deprecated since version 1.8\n     * @member Utils\n     * @memberof Popper\n     */\n\n  }]);\n  return Popper;\n}();\n\n/**\n * The `referenceObject` is an object that provides an interface compatible with Popper.js\n * and lets you use it as replacement of a real DOM node.<br />\n * You can use this method to position a popper relatively to a set of coordinates\n * in case you don't have a DOM node to use as reference.\n *\n * ```\n * new Popper(referenceObject, popperNode);\n * ```\n *\n * NB: This feature isn't supported in Internet Explorer 10.\n * @name referenceObject\n * @property {Function} data.getBoundingClientRect\n * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.\n * @property {number} data.clientWidth\n * An ES6 getter that will return the width of the virtual reference element.\n * @property {number} data.clientHeight\n * An ES6 getter that will return the height of the virtual reference element.\n */\n\n\nPopper.Utils = (typeof window !== 'undefined' ? window : global).PopperUtils;\nPopper.placements = placements;\nPopper.Defaults = Defaults;\n\nreturn Popper;\n\n})));\n//# sourceMappingURL=popper.js.map\n"],"sourceRoot":"assets/scripts/"}